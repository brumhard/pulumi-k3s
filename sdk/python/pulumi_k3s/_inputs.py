# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'NodeArgs',
    'RuntimeConfigurationArgs',
    'VersionConfigurationArgs',
]

@pulumi.input_type
class NodeArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 runtime_config: Optional[pulumi.Input['RuntimeConfigurationArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "private_key", private_key)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if runtime_config is not None:
            pulumi.set(__self__, "runtime_config", runtime_config)
        if user is None:
            user = 'root'
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> Optional[pulumi.Input['RuntimeConfigurationArgs']]:
        return pulumi.get(self, "runtime_config")

    @runtime_config.setter
    def runtime_config(self, value: Optional[pulumi.Input['RuntimeConfigurationArgs']]):
        pulumi.set(self, "runtime_config", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class RuntimeConfigurationArgs:
    def __init__(__self__, *,
                 enable_g_visor: Optional[pulumi.Input[bool]] = None):
        if enable_g_visor is not None:
            pulumi.set(__self__, "enable_g_visor", enable_g_visor)

    @property
    @pulumi.getter(name="enableGVisor")
    def enable_g_visor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_g_visor")

    @enable_g_visor.setter
    def enable_g_visor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_g_visor", value)


@pulumi.input_type
class VersionConfigurationArgs:
    def __init__(__self__, *,
                 channel: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


