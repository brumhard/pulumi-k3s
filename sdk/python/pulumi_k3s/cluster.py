# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 master_nodes: pulumi.Input[Sequence[pulumi.Input['NodeArgs']]],
                 agents: Optional[pulumi.Input[Sequence[pulumi.Input['NodeArgs']]]] = None,
                 version_config: Optional[pulumi.Input['VersionConfigurationArgs']] = None):
        """
        The set of arguments for constructing a Cluster resource.
        """
        pulumi.set(__self__, "master_nodes", master_nodes)
        if agents is not None:
            pulumi.set(__self__, "agents", agents)
        if version_config is not None:
            pulumi.set(__self__, "version_config", version_config)

    @property
    @pulumi.getter(name="masterNodes")
    def master_nodes(self) -> pulumi.Input[Sequence[pulumi.Input['NodeArgs']]]:
        return pulumi.get(self, "master_nodes")

    @master_nodes.setter
    def master_nodes(self, value: pulumi.Input[Sequence[pulumi.Input['NodeArgs']]]):
        pulumi.set(self, "master_nodes", value)

    @property
    @pulumi.getter
    def agents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeArgs']]]]:
        return pulumi.get(self, "agents")

    @agents.setter
    def agents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeArgs']]]]):
        pulumi.set(self, "agents", value)

    @property
    @pulumi.getter(name="versionConfig")
    def version_config(self) -> Optional[pulumi.Input['VersionConfigurationArgs']]:
        return pulumi.get(self, "version_config")

    @version_config.setter
    def version_config(self, value: Optional[pulumi.Input['VersionConfigurationArgs']]):
        pulumi.set(self, "version_config", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodeArgs']]]]] = None,
                 master_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodeArgs']]]]] = None,
                 version_config: Optional[pulumi.Input[pulumi.InputType['VersionConfigurationArgs']]] = None,
                 __props__=None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodeArgs']]]]] = None,
                 master_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodeArgs']]]]] = None,
                 version_config: Optional[pulumi.Input[pulumi.InputType['VersionConfigurationArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["agents"] = agents
            if master_nodes is None and not opts.urn:
                raise TypeError("Missing required property 'master_nodes'")
            __props__.__dict__["master_nodes"] = master_nodes
            __props__.__dict__["version_config"] = version_config
            __props__.__dict__["kubeconfig"] = None
        super(Cluster, __self__).__init__(
            'k3s:index:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ClusterArgs.__new__(ClusterArgs)

        __props__.__dict__["agents"] = None
        __props__.__dict__["kubeconfig"] = None
        __props__.__dict__["master_nodes"] = None
        __props__.__dict__["version_config"] = None
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def agents(self) -> pulumi.Output[Optional[Sequence['outputs.Node']]]:
        return pulumi.get(self, "agents")

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter(name="masterNodes")
    def master_nodes(self) -> pulumi.Output[Sequence['outputs.Node']]:
        return pulumi.get(self, "master_nodes")

    @property
    @pulumi.getter(name="versionConfig")
    def version_config(self) -> pulumi.Output[Optional['outputs.VersionConfiguration']]:
        return pulumi.get(self, "version_config")

