// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package k3s

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Node struct {
	Host       string  `pulumi:"host"`
	PrivateKey string  `pulumi:"privateKey"`
	User       *string `pulumi:"user"`
}

// NodeInput is an input type that accepts NodeArgs and NodeOutput values.
// You can construct a concrete instance of `NodeInput` via:
//
//          NodeArgs{...}
type NodeInput interface {
	pulumi.Input

	ToNodeOutput() NodeOutput
	ToNodeOutputWithContext(context.Context) NodeOutput
}

type NodeArgs struct {
	Host       pulumi.StringInput    `pulumi:"host"`
	PrivateKey pulumi.StringInput    `pulumi:"privateKey"`
	User       pulumi.StringPtrInput `pulumi:"user"`
}

func (NodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Node)(nil)).Elem()
}

func (i NodeArgs) ToNodeOutput() NodeOutput {
	return i.ToNodeOutputWithContext(context.Background())
}

func (i NodeArgs) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeOutput)
}

// NodeArrayInput is an input type that accepts NodeArray and NodeArrayOutput values.
// You can construct a concrete instance of `NodeArrayInput` via:
//
//          NodeArray{ NodeArgs{...} }
type NodeArrayInput interface {
	pulumi.Input

	ToNodeArrayOutput() NodeArrayOutput
	ToNodeArrayOutputWithContext(context.Context) NodeArrayOutput
}

type NodeArray []NodeInput

func (NodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Node)(nil)).Elem()
}

func (i NodeArray) ToNodeArrayOutput() NodeArrayOutput {
	return i.ToNodeArrayOutputWithContext(context.Background())
}

func (i NodeArray) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeArrayOutput)
}

type NodeOutput struct{ *pulumi.OutputState }

func (NodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Node)(nil)).Elem()
}

func (o NodeOutput) ToNodeOutput() NodeOutput {
	return o
}

func (o NodeOutput) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return o
}

func (o NodeOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v Node) string { return v.Host }).(pulumi.StringOutput)
}

func (o NodeOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v Node) string { return v.PrivateKey }).(pulumi.StringOutput)
}

func (o NodeOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Node) *string { return v.User }).(pulumi.StringPtrOutput)
}

type NodeArrayOutput struct{ *pulumi.OutputState }

func (NodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Node)(nil)).Elem()
}

func (o NodeArrayOutput) ToNodeArrayOutput() NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) Index(i pulumi.IntInput) NodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Node {
		return vs[0].([]Node)[vs[1].(int)]
	}).(NodeOutput)
}

func init() {
	pulumi.RegisterOutputType(NodeOutput{})
	pulumi.RegisterOutputType(NodeArrayOutput{})
}
