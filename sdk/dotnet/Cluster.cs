// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.K3s
{
    [K3sResourceType("k3s:index:Cluster")]
    public partial class Cluster : Pulumi.CustomResource
    {
        [Output("agents")]
        public Output<ImmutableArray<Outputs.Node>> Agents { get; private set; } = null!;

        [Output("kubeconfig")]
        public Output<string> Kubeconfig { get; private set; } = null!;

        [Output("masterNodes")]
        public Output<ImmutableArray<Outputs.Node>> MasterNodes { get; private set; } = null!;

        [Output("versionConfig")]
        public Output<Outputs.VersionConfiguration?> VersionConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("k3s:index:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("k3s:index:Cluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        [Input("agents")]
        private InputList<Inputs.NodeArgs>? _agents;
        public InputList<Inputs.NodeArgs> Agents
        {
            get => _agents ?? (_agents = new InputList<Inputs.NodeArgs>());
            set => _agents = value;
        }

        [Input("masterNodes", required: true)]
        private InputList<Inputs.NodeArgs>? _masterNodes;
        public InputList<Inputs.NodeArgs> MasterNodes
        {
            get => _masterNodes ?? (_masterNodes = new InputList<Inputs.NodeArgs>());
            set => _masterNodes = value;
        }

        [Input("versionConfig")]
        public Input<Inputs.VersionConfigurationArgs>? VersionConfig { get; set; }

        public ClusterArgs()
        {
        }
    }
}
